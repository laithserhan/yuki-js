{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "Literal",
        "value": "use strict",
        "raw": "\"use strict\""
      },
      "directive": "use strict"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "size"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "arr"
              }
            ],
            "body": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "arr"
              },
              "property": {
                "type": "Identifier",
                "name": "length"
              }
            },
            "generator": false,
            "expression": true,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "CallStack"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "maxSize"
              },
              {
                "type": "AssignmentPattern",
                "left": {
                  "type": "Identifier",
                  "name": "addressSize"
                },
                "right": {
                  "type": "Literal",
                  "value": 2,
                  "raw": "2"
                }
              }
            ],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "callStackSize"
                      },
                      "init": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  ],
                  "kind": "let"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "$in"
                      },
                      "init": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "callStackSize"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "addressSize"
                                }
                              }
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "Identifier",
                                  "name": "callStackSize"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "maxSize"
                                }
                              },
                              "consequent": {
                                "type": "ThrowStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Error"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "Max call stack exceeded",
                                      "raw": "'Max call stack exceeded'"
                                    }
                                  ]
                                }
                              },
                              "alternate": null
                            }
                          ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "$out"
                      },
                      "init": {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "-=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "callStackSize"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "addressSize"
                                }
                              }
                            }
                          ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "$in"
                        },
                        "computed": false,
                        "value": {
                          "type": "Identifier",
                          "name": "$in"
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": true
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "$out"
                        },
                        "computed": false,
                        "value": {
                          "type": "Identifier",
                          "name": "$out"
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": true
                      }
                    ]
                  }
                }
              ]
            },
            "generator": false,
            "expression": false,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "Memory"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "lets"
              },
              {
                "type": "AssignmentPattern",
                "left": {
                  "type": "Identifier",
                  "name": "debug"
                },
                "right": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false"
                }
              }
            ],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "$"
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "properties": []
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "numbers"
                      },
                      "init": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "Map"
                        },
                        "arguments": []
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "lets"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "forEach"
                      }
                    },
                    "arguments": [
                      {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "l"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "===",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "l"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "type"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "array",
                                  "raw": "'array'"
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$"
                                        },
                                        "property": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "l"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "name"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "ArrayProxy"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "l"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "debug"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "numbers"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "set"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "l"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "name"
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "l"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$"
                                        },
                                        "property": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "l"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "name"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                      }
                    ]
                  }
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "handler"
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "set"
                            },
                            "computed": false,
                            "value": {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "string",
                                        "raw": "'string'"
                                      }
                                    },
                                    "consequent": {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "yukiNumber"
                                        },
                                        "init": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "numbers"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "get"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "const"
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "yukiNumber"
                                      },
                                      "prefix": true
                                    },
                                    "consequent": {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "target"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        }
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "ensureNumber"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "yukiNumber"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Literal",
                                      "value": true,
                                      "raw": "true"
                                    }
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Proxy"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "$"
                      },
                      {
                        "type": "Identifier",
                        "name": "handler"
                      }
                    ]
                  }
                }
              ]
            },
            "generator": false,
            "expression": false,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "ArrayProxy"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "a"
              },
              {
                "type": "Identifier",
                "name": "debug"
              }
            ],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "arr"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "Array"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "a"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                }
                              }
                            ]
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "fill"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "handler"
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "get"
                            },
                            "computed": false,
                            "value": {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "symbol",
                                        "raw": "'symbol'"
                                      }
                                    },
                                    "consequent": {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "target"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        }
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "index"
                                        },
                                        "init": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "typeof",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "number",
                                              "raw": "'number'"
                                            }
                                          },
                                          "consequent": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "alternate": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "parseInt"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": 10,
                                                "raw": "10"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "const"
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "isNaN"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "index"
                                          }
                                        ]
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "debug"
                                      }
                                    },
                                    "consequent": {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "target"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        }
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "isNaN"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "index"
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "index"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": ">=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "index"
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "a"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      }
                                    },
                                    "consequent": {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "Error"
                                        },
                                        "arguments": [
                                          {
                                            "type": "TemplateLiteral",
                                            "quasis": [
                                              {
                                                "type": "TemplateElement",
                                                "value": {
                                                  "raw": "Unexpected index ",
                                                  "cooked": "Unexpected index "
                                                },
                                                "tail": false
                                              },
                                              {
                                                "type": "TemplateElement",
                                                "value": {
                                                  "raw": "",
                                                  "cooked": ""
                                                },
                                                "tail": true
                                              }
                                            ],
                                            "expressions": [
                                              {
                                                "type": "Identifier",
                                                "name": "key"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "target"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    }
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "set"
                            },
                            "computed": false,
                            "value": {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "symbol",
                                        "raw": "'symbol'"
                                      }
                                    },
                                    "consequent": {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "index"
                                        },
                                        "init": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "typeof",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "number",
                                              "raw": "'number'"
                                            }
                                          },
                                          "consequent": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "alternate": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "parseInt"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": 10,
                                                "raw": "10"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "const"
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "isNaN"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "index"
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "index"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": ">=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "index"
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "a"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      }
                                    },
                                    "consequent": {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "target"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "index"
                                        }
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "ensureNumber"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "a"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Literal",
                                      "value": true,
                                      "raw": "true"
                                    }
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Proxy"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "arr"
                      },
                      {
                        "type": "Identifier",
                        "name": "handler"
                      }
                    ]
                  }
                }
              ]
            },
            "generator": false,
            "expression": false,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "ensureNumber"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "value"
              },
              {
                "type": "Identifier",
                "name": "l"
              }
            ],
            "body": {
              "type": "ConditionalExpression",
              "test": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "l"
                },
                "property": {
                  "type": "Identifier",
                  "name": "signed"
                }
              },
              "consequent": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "unsignedToSigned"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "value"
                  },
                  {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "l"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "bitLength"
                    }
                  }
                ]
              },
              "alternate": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "signedToUnsigned"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "value"
                  },
                  {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "l"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "bitLength"
                    }
                  }
                ]
              }
            },
            "generator": false,
            "expression": true,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "signedToUnsigned"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "value"
              },
              {
                "type": "Identifier",
                "name": "bitLength"
              }
            ],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "maxUint"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "maxValue"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "bitLength"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "WhileStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "maxUint"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "-=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "maxUint"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "WhileStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "+=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "maxUint"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  }
                }
              ]
            },
            "generator": false,
            "expression": false,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "unsignedToSigned"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "value"
              },
              {
                "type": "Identifier",
                "name": "bitLength"
              }
            ],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "maxUint"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "maxValue"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "bitLength"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "maxInt"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Math"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "floor"
                          }
                        },
                        "arguments": [
                          {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "/",
                              "left": {
                                "type": "Identifier",
                                "name": "maxUint"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                              }
                            },
                            "right": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "const"
                },
                {
                  "type": "WhileStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "maxUint"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "-=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "maxUint"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "WhileStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "maxInt"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "-=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "maxUint"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  }
                }
              ]
            },
            "generator": false,
            "expression": false,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "maxValue"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "bitLength"
              }
            ],
            "body": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "Math"
                },
                "property": {
                  "type": "Identifier",
                  "name": "pow"
                }
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": 2,
                  "raw": "2"
                },
                {
                  "type": "Identifier",
                  "name": "bitLength"
                }
              ]
            },
            "generator": false,
            "expression": true,
            "async": false
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "ObjectPattern",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "$in"
                },
                "computed": false,
                "value": {
                  "type": "Identifier",
                  "name": "$in"
                },
                "kind": "init",
                "method": false,
                "shorthand": true
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "$out"
                },
                "computed": false,
                "value": {
                  "type": "Identifier",
                  "name": "$out"
                },
                "kind": "init",
                "method": false,
                "shorthand": true
              }
            ]
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "CallStack"
            },
            "arguments": [
              {
                "type": "Literal",
                "value": 1024,
                "raw": "1024"
              },
              {
                "type": "Literal",
                "value": 2,
                "raw": "2"
              }
            ]
          }
        }
      ],
      "kind": "const"
    }
  ],
  "sourceType": "script"
}
